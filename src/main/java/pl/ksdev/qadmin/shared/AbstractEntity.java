package pl.ksdev.qadmin.shared;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.Hibernate;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.Instant;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.UUID;

/**
 * The entity class must have a public or protected no-argument constructor.
 * It may define additional constructors as well.
 * <p>
 * The entity class MUST call the {@link #initUuid()} in constructor during
 * instantiation.
 */
@MappedSuperclass
@Getter
public abstract class AbstractEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Long id;

    /**
     * UUID is used to have a properly working equals and hashCode immediately
     * on object creation, before ID is generated by Hibernate (as on object
     * creation ID is null and cannot be used, and natural key is not always
     * available). Possible usefulness of a globally unique ID is a side effect.
     */
    @Column(nullable = false, updatable = false)
    private UUID uuid;

    @Version
    private Integer version;

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private Instant creationDate;

    @UpdateTimestamp
    @Column(nullable = false)
    @Setter
    private Instant modificationDate;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        // TODO https://stackoverflow.com/a/11299778
        if (Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        AbstractEntity that = (AbstractEntity) o;
        return Objects.equals(uuid, that.uuid);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(uuid);
    }

    @Override
    public String toString() {
        return new StringJoiner(", ", AbstractEntity.class.getSimpleName() + "[", "]")
            .add("id=" + id)
            .toString();
    }

    protected void initUuid() {
        if (uuid != null) {
            throw new IllegalStateException("Entity UUID cannot be changed");
        }
        uuid = UUID.randomUUID();
    }
}
